"""add_api_keys_table

Revision ID: 1873c54c9f3b
Revises: bca5f0e2904e
Create Date: 2025-09-25 16:03:52.902783

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1873c54c9f3b'
down_revision = 'bca5f0e2904e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_smart_label_rules_id'), table_name='smart_label_rules')
    op.drop_table('smart_label_rules')
    op.drop_index(op.f('ix_notifications_created_at'), table_name='notifications')
    op.drop_index(op.f('ix_notifications_id'), table_name='notifications')
    op.drop_table('notifications')
    op.drop_table('user_ip_ranges')
    op.drop_index(op.f('ix_assets_id'), table_name='assets')
    op.drop_index(op.f('ix_assets_name'), table_name='assets')
    op.drop_index(op.f('ix_assets_primary_ip'), table_name='assets')
    op.drop_table('assets')
    op.drop_index(op.f('ix_scans_id'), table_name='scans')
    op.drop_index(op.f('ix_scans_status'), table_name='scans')
    op.drop_index(op.f('ix_scans_timestamp'), table_name='scans')
    op.drop_table('scans')
    op.drop_index(op.f('ix_ldap_configs_id'), table_name='ldap_configs')
    op.drop_table('ldap_configs')
    op.drop_index(op.f('ix_credentials_id'), table_name='credentials')
    op.drop_table('credentials')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_asset_groups_id'), table_name='asset_groups')
    op.drop_index(op.f('ix_asset_groups_name'), table_name='asset_groups')
    op.drop_table('asset_groups')
    op.drop_index(op.f('ix_scanner_configs_id'), table_name='scanner_configs')
    op.drop_table('scanner_configs')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_settings_id'), table_name='settings')
    op.drop_table('settings')
    op.drop_table('asset_group_association')
    op.drop_table('asset_group_label_association')
    op.drop_index(op.f('ix_labels_category'), table_name='labels')
    op.drop_index(op.f('ix_labels_id'), table_name='labels')
    op.drop_index(op.f('ix_labels_label_type'), table_name='labels')
    op.drop_index(op.f('ix_labels_name'), table_name='labels')
    op.drop_table('labels')
    op.drop_table('asset_label_association')
    op.drop_index(op.f('ix_ip_addresses_asset_ip'), table_name='ip_addresses')
    op.drop_index(op.f('ix_ip_addresses_id'), table_name='ip_addresses')
    op.drop_index(op.f('ix_ip_addresses_ip'), table_name='ip_addresses')
    op.drop_table('ip_addresses')
    op.drop_index(op.f('ix_label_templates_id'), table_name='label_templates')
    op.drop_table('label_templates')
    op.drop_index(op.f('ix_ldap_sync_logs_id'), table_name='ldap_sync_logs')
    op.drop_table('ldap_sync_logs')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_scan_tasks_id'), table_name='scan_tasks')
    op.drop_index(op.f('ix_scan_tasks_status'), table_name='scan_tasks')
    op.drop_table('scan_tasks')
    op.drop_index(op.f('ix_ip_ranges_id'), table_name='ip_ranges')
    op.drop_table('ip_ranges')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ip_ranges',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ip_ranges_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ip_range', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('ip_start', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('ip_end', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('range_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_restrictive', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='ip_ranges_created_by_fkey'),
    sa.PrimaryKeyConstraint('id', name='ip_ranges_pkey'),
    sa.UniqueConstraint('name', name='ip_ranges_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_ip_ranges_id'), 'ip_ranges', ['id'], unique=False)
    op.create_table('scan_tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('scan_tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('target', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('scan_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('progress', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_ip', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('total_ips', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('completed_ips', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discovered_devices', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('discovery_depth', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
    sa.Column('scanner_ids', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='scan_tasks_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_scan_tasks_status'), 'scan_tasks', ['status'], unique=False)
    op.create_index(op.f('ix_scan_tasks_id'), 'scan_tasks', ['id'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('name', name='roles_name_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_table('ldap_sync_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ldap_config_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sync_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('users_created', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('users_updated', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('users_deactivated', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('groups_processed', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('errors_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['ldap_config_id'], ['ldap_configs.id'], name=op.f('ldap_sync_logs_ldap_config_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ldap_sync_logs_pkey'))
    )
    op.create_index(op.f('ix_ldap_sync_logs_id'), 'ldap_sync_logs', ['id'], unique=False)
    op.create_table('label_templates',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('labels', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('label_templates_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('label_templates_pkey'))
    )
    op.create_index(op.f('ix_label_templates_id'), 'label_templates', ['id'], unique=False)
    op.create_table('ip_addresses',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('ip', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_primary', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('ip_addresses_asset_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('ip_addresses_pkey'))
    )
    op.create_index(op.f('ix_ip_addresses_ip'), 'ip_addresses', ['ip'], unique=False)
    op.create_index(op.f('ix_ip_addresses_id'), 'ip_addresses', ['id'], unique=False)
    op.create_index(op.f('ix_ip_addresses_asset_ip'), 'ip_addresses', ['asset_id', 'ip'], unique=True)
    op.create_table('asset_label_association',
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('asset_label_association_asset_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], name=op.f('asset_label_association_label_id_fkey'), ondelete='CASCADE')
    )
    op.create_table('labels',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('labels_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(length=7), autoincrement=False, nullable=True),
    sa.Column('label_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('auto_apply_rules', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_system', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='labels_created_by_fkey'),
    sa.ForeignKeyConstraint(['parent_id'], ['labels.id'], name='labels_parent_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='labels_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_labels_name'), 'labels', ['name'], unique=True)
    op.create_index(op.f('ix_labels_label_type'), 'labels', ['label_type'], unique=False)
    op.create_index(op.f('ix_labels_id'), 'labels', ['id'], unique=False)
    op.create_index(op.f('ix_labels_category'), 'labels', ['category'], unique=False)
    op.create_table('asset_group_label_association',
    sa.Column('asset_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_group_id'], ['asset_groups.id'], name=op.f('asset_group_label_association_asset_group_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], name=op.f('asset_group_label_association_label_id_fkey'), ondelete='CASCADE')
    )
    op.create_table('asset_group_association',
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('asset_group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_group_id'], ['asset_groups.id'], name=op.f('asset_group_association_asset_group_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('asset_group_association_asset_id_fkey'), ondelete='CASCADE')
    )
    op.create_table('settings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('scanners', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_subnet', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('scan_timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_concurrent_scans', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_discovery_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('max_discovery_depth', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('email_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_smtp_server', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('email_smtp_port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('email_username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email_password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('settings_pkey'))
    )
    op.create_index(op.f('ix_settings_id'), 'settings', ['id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('session_token', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_sessions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_sessions_pkey'))
    )
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_table('scanner_configs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('url', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('subnets', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('max_concurrent_scans', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timeout_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('scanner_configs_pkey')),
    sa.UniqueConstraint('name', name=op.f('scanner_configs_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_scanner_configs_id'), 'scanner_configs', ['id'], unique=False)
    op.create_table('asset_groups',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('default_password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('default_ssh_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('custom_fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('asset_groups_pkey'))
    )
    op.create_index(op.f('ix_asset_groups_name'), 'asset_groups', ['name'], unique=False)
    op.create_index(op.f('ix_asset_groups_id'), 'asset_groups', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('preferences', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('auth_source', sa.VARCHAR(length=20), server_default=sa.text("'local'::character varying"), autoincrement=False, nullable=False),
    sa.Column('ldap_dn', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('ldap_uid', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_ldap_sync', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='users_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('credentials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('credential_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('ssh_private_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ssh_public_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ssh_passphrase', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('api_key', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('api_secret', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('certificate_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('private_key_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('domain', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('credentials_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('credentials_pkey')),
    sa.UniqueConstraint('name', name=op.f('credentials_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_credentials_id'), 'credentials', ['id'], unique=False)
    op.create_table('ldap_configs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('server_uri', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('use_ssl', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('use_tls', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verify_cert', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('bind_dn', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('bind_password', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('user_base_dn', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('user_search_filter', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('user_search_scope', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('username_attribute', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('email_attribute', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('full_name_attribute', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('first_name_attribute', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name_attribute', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('group_base_dn', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('group_search_filter', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('group_member_attribute', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('user_member_attribute', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('role_mapping', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('connection_timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('read_timeout', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_connections', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retry_attempts', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('auto_sync_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sync_interval_minutes', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_sync', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sync_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('ldap_configs_created_by_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('ldap_configs_pkey')),
    sa.UniqueConstraint('name', name=op.f('ldap_configs_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_ldap_configs_id'), 'ldap_configs', ['id'], unique=False)
    op.create_table('scans',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('asset_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scan_task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('scan_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('scan_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['asset_id'], ['assets.id'], name=op.f('scans_asset_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scan_task_id'], ['scan_tasks.id'], name=op.f('scans_scan_task_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('scans_pkey'))
    )
    op.create_index(op.f('ix_scans_timestamp'), 'scans', ['timestamp'], unique=False)
    op.create_index(op.f('ix_scans_status'), 'scans', ['status'], unique=False)
    op.create_index(op.f('ix_scans_id'), 'scans', ['id'], unique=False)
    op.create_table('assets',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('primary_ip', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('mac_address', sa.VARCHAR(length=17), autoincrement=False, nullable=True),
    sa.Column('hostname', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('os_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('os_family', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('os_version', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('serial_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('department', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('username', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ssh_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_managed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_seen', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('custom_fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('scan_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('assets_pkey'))
    )
    op.create_index(op.f('ix_assets_primary_ip'), 'assets', ['primary_ip'], unique=False)
    op.create_index(op.f('ix_assets_name'), 'assets', ['name'], unique=False)
    op.create_index(op.f('ix_assets_id'), 'assets', ['id'], unique=False)
    op.create_table('user_ip_ranges',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ip_range_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('granted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('granted_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], name=op.f('user_ip_ranges_granted_by_fkey')),
    sa.ForeignKeyConstraint(['ip_range_id'], ['ip_ranges.id'], name=op.f('user_ip_ranges_ip_range_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_ip_ranges_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'ip_range_id', name=op.f('user_ip_ranges_pkey'))
    )
    op.create_table('notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('scan_task_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['scan_task_id'], ['scan_tasks.id'], name=op.f('notifications_scan_task_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('notifications_pkey'))
    )
    op.create_index(op.f('ix_notifications_id'), 'notifications', ['id'], unique=False)
    op.create_index(op.f('ix_notifications_created_at'), 'notifications', ['created_at'], unique=False)
    op.create_table('smart_label_rules',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('conditions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('label_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('auto_apply', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('remove_on_false', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('match_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('last_matched', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('smart_label_rules_created_by_fkey')),
    sa.ForeignKeyConstraint(['label_id'], ['labels.id'], name=op.f('smart_label_rules_label_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('smart_label_rules_pkey'))
    )
    op.create_index(op.f('ix_smart_label_rules_id'), 'smart_label_rules', ['id'], unique=False)
    # ### end Alembic commands ###
